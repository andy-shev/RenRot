#!/usr/local/bin/perl -w

#
# $Id$
#

use strict;
require 5.006;
use Time::localtime;
use Time::Local;
use Image::ExifTool;
use Getopt::Long;
use POSIX qw(ceil log);

our $VERSION = "0.19.1";	# the version of this script
my $maxVerbosity = 4;		# our max verbosity level (internal)

# Command line options
my $aggr = 0;		# execute aggregation after main process
my $aggrDelta;		# aggregation time delta in seconds (file with delta > $aggrDelta is placed in new DIR)
my $aggrDir;		# counterless directory name for "delta" type aggregation
my $aggrDumb;		# no real moving to catalogues done, only to sho how it'll be without this flag
my $aggrTemplate;	# template for the files aggregation taken from CLI
my $comfile;		# file with commentary
my $configFile;		# config file
my @excludeList;	# files that will be excluded from list
my $extensionToProcess;	# the extension of files to work with
my @files;		# array of the sorted filenames to process
my $mtime;		# mtime taken from CLI
my $nameTemplate;	# template for the filename taken from CLI
my $noRename;		# no rename needed, default is to rename to the YYYYmmddHHMMSS.ext
my $noRotation;		# no rotation needed, default is to rotate
my $orientTag = 0;	# rotate by changing Orientation tag (no real rotation)
my $quiet = 0;		# suppressing messages
my $rotateAngle;	# define the angle, to rotate on, 90 or 270
my $rotateThumbnail; 	# define the angle, to rotate on, 90 or 270
my $verbose = 0;	# verbosity of output
my $workDir = '.';	# we'll work ONLY in current directory

# processing message ( ? necessary to consult man GetOptions sub { $verbose = 0 } )
sub procmsg {
	print @_ if ($quiet == 0);
}

# information message
sub infomsg {
	print STDERR @_;
}

# warning message
sub warnmsg {
	print STDERR "Warning: ", @_;
}

# error message
sub errmsg {
	print STDERR "ERROR: ", @_;
}

# fatal message
sub fatalmsg {
	print STDERR "FATAL: ", @_;
}

# debug message
sub dbgmsg {
	my $level = shift;
	if ($verbose >= $level) {
		print STDERR "DEBUG[$level]: ", @_;
	}
}

# parse command line arguments
sub getOptions {
	my $showVersion = 0;	# need version
	my $showHelp = 0;	# need help
	my $getOptions = GetOptions (
					"aggr!" => \$aggr,
					"aggr-delta=i" => \$aggrDelta,
					"aggr-directory|aggr-dir=s" => \$aggrDir,
					"aggr-dumb!" => \$aggrDumb,
					"aggr-template=s" => \$aggrTemplate,
					"comment-file=s" => \$comfile,
					"config-file|c=s" => \$configFile,
					"exclude=s" => \@excludeList,
					"extension|e=s" => \$extensionToProcess,
					"help|?"   => \$showHelp,
					"mtime!" => \$mtime,
					"name-template=s" => \$nameTemplate,
					"no-rename" => \$noRename,
					"no-rotate" => \$noRotation,
					"only-orientation" => \$orientTag,
					"quiet|q" => \$quiet,
					"rotate-angle|r=i" => \$rotateAngle,
					"rotate-thumb=i" => \$rotateThumbnail,
					"v+" => \$verbose,
					"version" => \$showVersion,
					"work-directory|d=s" => \$workDir,
				    );

	dbgmsg (3, "getOptions(): GetOptions results:\n");
	dbgmsg (3, "getOptions(): --aggr: $aggr\n") if (defined $aggr);
	dbgmsg (3, "getOptions(): --aggr-delta: $aggrDelta\n") if (defined $aggrDelta);
	dbgmsg (3, "getOptions(): --aggr-directory: $aggrDir\n") if (defined $aggrDir);
	dbgmsg (3, "getOptions(): --aggr-dumb: $aggrDumb\n") if (defined $aggrDumb);
	dbgmsg (3, "getOptions(): --aggr-template: $aggrTemplate\n") if (defined $aggrTemplate);
	dbgmsg (3, "getOptions(): --comment-file: $comfile\n") if (defined $comfile);
	dbgmsg (3, "getOptions(): --config-file: $configFile\n") if (defined $configFile);
	dbgmsg (3, "getOptions(): --exclude:\n", join("\n", @excludeList), "\n") if ($#excludeList >= 0);
	dbgmsg (3, "getOptions(): --extension: $extensionToProcess\n") if (defined $extensionToProcess);
	dbgmsg (3, "getOptions(): --mtime: $mtime\n") if (defined $mtime);
	dbgmsg (3, "getOptions(): --name-template: $nameTemplate\n") if (defined $nameTemplate);
	dbgmsg (3, "getOptions(): --no-rename: $noRename\n") if (defined $noRename);
	dbgmsg (3, "getOptions(): --no-rotate: $noRotation\n") if (defined $noRotation);
	dbgmsg (3, "getOptions(): --only-orientation: $orientTag\n") if (defined $orientTag);
	dbgmsg (3, "getOptions(): --rotate-angle: $rotateAngle\n") if (defined $rotateAngle);
	dbgmsg (3, "getOptions(): --rotate-thumb: $rotateThumbnail\n") if (defined $rotateThumbnail);
	dbgmsg (3, "getOptions(): --work-directory: $workDir\n") if (defined $workDir);
	dbgmsg (3, "getOptions(): ARGV:\n", join("\n", @ARGV), "\n") if ($#ARGV >= 0);

	if ($showHelp != 0) {
		usage();
		exit 0;
	}

	if ($showVersion != 0) {
		infomsg ("RenRot version $VERSION\n");
		exit 0;
	}

	if (not defined $extensionToProcess) {
		fatalmsg ("Extension of files is required!\n");
		exit 1;
	}

	if ($getOptions == 0) {
		usage();
		exit 1;
	}

	# change user's parameter '*.ext' to 'ext'
	$extensionToProcess =~ s/^\*\.//;
	dbgmsg (1, "getOptions(): Process with '$extensionToProcess' extension.\n");
}

# parse command line options
getOptions();

my $lce = lc($extensionToProcess);	# low cased extension
@files = @ARGV;				# all things in ARGV will be treated as file names to process

# the default, expected to be defined in the config file
our $COMMENTARY;
our $CiAdrCity;
our $CiAdrCtry;
our $CiAdrExtadr;
our $CiAdrPcode;
our $CiAdrRegion;
our $CiEmailWork;
our $CiTelWork;
our $CiUrlWork;
our $Mtime = 1;
our $NameTemplate = '%Y%m%d%H%M%S';	# name template
our $AggrTemplate = '%Y%m%d';		# aggregation template
our $AggrDelta = 900;
our $AggrDir = 'DIR';
our $AggrDumb = 1;

my $exiftoolVerbose = ($verbose > $maxVerbosity) ? ($verbose - $maxVerbosity) : 0;

my $etc_rc = "/etc/renrot.rc";
my $usr_local_etc_rc = "/usr/local/etc/renrot.rc";
my $home_rc = $ENV{"HOME"} . "/.renrotrc";;

if ( defined ( $configFile ) and -f $configFile ) { do $configFile; }
else {
	if ( -f $etc_rc ) { do $etc_rc; }
	if ( -f $usr_local_etc_rc ) { do $usr_local_etc_rc; }
	if ( -f $home_rc ) { do $home_rc; }
}

# redefining options set in config with set via CLI ones
$Mtime		= $mtime if (defined $mtime);
$NameTemplate	= $nameTemplate if (defined $nameTemplate);
$AggrTemplate	= $aggrTemplate if (defined $aggrTemplate);
$AggrDelta	= $aggrDelta if (defined $aggrDelta);
$AggrDumb	= $aggrDumb if (defined $aggrDumb);
$AggrDir	= $aggrDir if (defined $aggrDir);

# ExifTool object configuration
our $exifTool = new Image::ExifTool;
$exifTool->Options(Binary => 1, Unknown => 1, DateFormat => '%Y%m%d%H%M%S', Verbose => $exiftoolVerbose);

our $info;		# ImageInfo object
our $filecounter = 1;	# counter to cat and increment when DateTimeOriginal is absent
our $counterprefixsize;	# number of digits in $counterprefix
my $file;		# file in the directory
my @filenames;		# array of the filenames to process
my $newfilename;	# the name file to be renamed to
my %filenameshash;	# hash for old file names
my $filenameshashkey;	# keys %filenameshash
my $comment;		# where to put the commentary to write
my @commentar;		# array to put the content of the file with commentary
my $counterprefix;	# file number counter
my $now;		# now timestamp to use to name the files without DateTimeOriginal tag

my @rotparms = (''
	, '-flip horizontal'
        , '-rotate 180'
        , '-flip vertical'
        , '-transpose'
        , '-rotate 90'
        , '-transverse'
        , '-rotate 270');	# array of options to jpegtran to rotate the file

my %rotangles = ( '90' => '-rotate 90',
		 '270' => '-rotate 270');	# array of options to rotate file "by hands"

my @angles = ( ''
	, 'fh'
	, '180cw'
	, 'fv'
	, 'tp'
	, '90cw'
	, 'tv'
	, '270cw' );	# the array of suffixes to add to the newfilename after rotating

chdir ($workDir) || ( fatalmsg ("Can't enter to $workDir!\n"), die );

# if no file given
if ( $#files < 0 and not @files ) {
	opendir (DIR, $workDir) || ( fatalmsg ("Can't open $workDir!\n"), die );
	while ( defined ( $file = readdir DIR )) {
		next if (-d $file);			# skip directories, no recursion
		push @files, $file;
	}
	closedir(DIR);
}

# independently of @files initialization doing this
foreach $file ( @files ) {
	next if (-d $file);				# skip directories, no recursion
	next if (grep {/^$file$/} @excludeList);	# skip excluded file
	if ($file =~ m/\.$extensionToProcess$/) {
		push @filenames, $file;
	}
}

# No file to process?
if ($#filenames < 0) {
	fatalmsg ("No files to process!\n");
	exit 1;
}

# Prepare software string for EXIF injection
my $softwareString = sprintf("ExifTool v%s, RenRot v%s", $Image::ExifTool::VERSION, $VERSION);
dbgmsg (1, "main(): Software: $softwareString\n");

# here we're preparing the variable, which contains the format
# of the counter output
$counterprefixsize = "%." . ceil(log($#filenames + 1) / log(10)) . "d";
dbgmsg (1, "main(): Counter size: $counterprefixsize (amount files in cache: ", $#filenames + 1, ")\n");

@files = sort @filenames;
dbgmsg (4, "main(): Pushed files(", $#files + 1, "):\n", join("\n", @files), "\n");

our $anglesuffix;	# the suffix to add to the end of the rotated files 90cw or 270cw
my $orientation;	# Orientation tag value

procmsg ("RENAMING / ROTATING\n===================\n");

foreach $file ( @files ) {
	procmsg ("Processing file: $file ...\n");

	# Setup defaults
	$info = $exifTool->ImageInfo($file);
	$newfilename = "";
	$anglesuffix = "0cw";

	################################################################################################
	#
	## analyzing whether to rotate
	#

	$orientation = $exifTool->GetValue("Orientation", 'ValueConv');

	if ( defined $noRotation ) { dbgmsg (2, "main(): No rotation asked, file orientation is left untouched.\n"); }
	elsif ( defined $rotateAngle ) {
		dbgmsg (2, "main(): We'll deal with: $file and $rotangles{$rotateAngle}.\n");
		if ($orientTag != 0) {
			rotateOrient($file, $orientation);
		} else {
			rotateFile($file, $rotangles{$rotateAngle});
			rotateThumbnail($file, $rotangles{$rotateAngle});
		}
		$anglesuffix = $rotateAngle . "cw";
	}
	elsif ( defined $rotateThumbnail ) {
		rotateThumbnail($file, $rotangles{$rotateThumbnail});
	}
	else {
		if (defined $orientation) {
			if ( $orientation > 1 ) {
				rotateFile($file, $rotparms[$orientation - 1]);
				rotateThumbnail($file, $rotparms[$orientation - 1]);
				$anglesuffix = $angles[$orientation - 1];
			}
			elsif ( $orientation == 1 ) {
				dbgmsg (2, "main(): No need to rotate, orientation is: Horisontal (normal).\n");
			}
			else {
				errmsg ("Something wrong, orientation low than 1: $orientation.\n");
			}
		}
		else {
			warnmsg ("Orientation tag is absent!\n");
		}
	}

	#################################################################################
	#
	## analyzing whether and how to rename file
	#
	if ( defined $noRename ) {
		dbgmsg (2, "main(): No renaming asked, filename is left untouched.\n");
		if ($newfilename = ($file =~ /^(.+)\.$lce/)) {
			$filenameshash{$newfilename} = getUnixTime(getTimestamp());
		}
	}
	else {
		$newfilename = template2name($NameTemplate);
		if ( $filenameshash{$newfilename} ) {
			$newfilename .= "." . sprintf($counterprefixsize,$filecounter);
		}
		$filenameshash{$newfilename} = getUnixTime(getTimestamp());

		$newfilename = sprintf("%s.%s", $newfilename, $lce);

		if ( $file ne $newfilename ) {
			if ( -f $newfilename ) {
				fatalmsg ("File $newfilename already exists!\n"), die;
			}
			rename ( $file, $newfilename )
				|| ( fatalmsg ("Unable to rename $file -> $newfilename.\n"), die );
			procmsg ("Renamed: $file -> $newfilename\n");
		}
		else { warnmsg ("No renaming needed for $newfilename, it looks as needed!\n"); }
	}

	###############################
	#
	## analyzing whether to comment
	#
	if ( $comfile ) {
		if ( open ( COMMENT, "<$comfile" ) ) {
			@commentar = <COMMENT>;
			unless ( close ( COMMENT ) ) { errmsg ("$comfile wasn't closed!\n"); }
			$comment = join ( '', @commentar );
			# preparing to write the commentary
			$exifTool->SetNewValue(Comment => $comment);
		}
	}
	else { dbgmsg (2, "main(): No commenting, file commentary is left untouched.\n"); }

	######################################
	#
	## preparing to write the UserComment and some additional tags
	#
	if ( not defined $noRename ) {
		if ( defined ( $COMMENTARY ) ) { $exifTool->SetNewValue(UserComment => $COMMENTARY); }

		if ( defined ( $CiAdrCity ) ) {
			$exifTool->SetNewValue('CreatorContactInfoCiAdrCity', $CiAdrCity, Group=>'XMP');
		}
		if ( defined ( $CiAdrCtry ) ) {
			$exifTool->SetNewValue('CreatorContactInfoCiAdrCtry', $CiAdrCtry, Group=>'XMP');
		}
		if ( defined ( $CiAdrExtadr ) ) {
			$exifTool->SetNewValue('CreatorContactInfoCiAdrExtadr', $CiAdrExtadr, Group=>'XMP');
		}
		if ( defined ( $CiAdrPcode ) ) {
			$exifTool->SetNewValue('CreatorContactInfoCiAdrPcode', $CiAdrPcode, Group=>'XMP');
		}
		if ( defined ( $CiAdrRegion ) ) {
			$exifTool->SetNewValue('CreatorContactInfoCiAdrRegion', $CiAdrRegion, Group=>'XMP');
		}
		if ( defined ( $CiEmailWork ) ) {
			$exifTool->SetNewValue('CreatorContactInfoCiEmailWork', $CiEmailWork, Group=>'XMP');
		}
		if ( defined ( $CiTelWork ) ) {
			$exifTool->SetNewValue('CreatorContactInfoCiTelWork', $CiTelWork, Group=>'XMP');
		}
		if ( defined ( $CiUrlWork ) ) {
			$exifTool->SetNewValue('CreatorContactInfoCiUrlWork', $CiUrlWork, Group=>'XMP');
		}

		$exifTool->SetNewValue('Software', $softwareString, Group=>'EXIF');

		# writing the changes to the EXIFs
		exifWritting($exifTool, $newfilename, $newfilename . "_comment");
	}

	# seting mtime for the file if been asked for
	if ($Mtime != 0) {
		my $mTime = getUnixTime(getTimestamp());
		utime $mTime,$mTime,$newfilename;
		dbgmsg (2, "main(): Changing mtime for $newfilename ok.\n");
	}

	procmsg ("\n");
	$filecounter++;
}

if ($aggr != 0) {
	aggregationProcess();
}

exit 0;

########################################################################################
#
# exifWritting() applies EXIF info
#
sub exifWritting {
	my $exifToolObject = shift;
	my $fileSrc = shift;
	my $fileDst = shift;

	my $result = $exifToolObject->WriteInfo($fileSrc, $fileDst);
	if ($result == 1) {
		dbgmsg (2, "exifWritting(): Writing to $fileDst seems to be OK.\n");
		rename ($fileDst, $fileSrc)
			|| ( fatalmsg ("$fileDst -> $fileSrc\n"), die );
	} elsif ($result == 2) {
		warnmsg ("No changes between $fileSrc and $fileDst. No EXIF was written.\n");
		unlink $fileDst;
	} else {
		my $errorMessage   = $exifToolObject->GetValue('Error');
		my $warningMessage = $exifToolObject->GetValue('Warning');
		if ( defined $errorMessage ) { errmsg ("ExifTool: $errorMessage\n"); }
		if ( defined $warningMessage ) { warnmsg ("ExifTool: $warningMessage\n"); }
	}
	return $result;
}

########################################################################################
#
# aggregationProcess() aggregates files to separate directories by request
#
sub aggregationProcess {
	my $filetmp;
	my $timestampPrev;
	my $filePrev;
	my $NewDir;
	my $DirCounter = 1;

	procmsg ("AGGREGATION\n===========\n");
	dbgmsg (1, "aggregationProcess(): Aggregation template: $AggrTemplate\n");

	$filecounter = 1;

	foreach $file ( sort ( keys %filenameshash ) ) {
		$filetmp = $file;
		$file .= $lce;
		dbgmsg (4, "aggregationProcess(): Processing file: $file\n");
		$info = $exifTool->ImageInfo($file);

		if ($AggrTemplate eq "delta")
			if ($filecounter == 1) {
				$timestampPrev = $filenameshash{$filetmp};
				$filePrev = $filetmp;
				$NewDir = $aggrDir . sprintf($counterprefixsize,$DirCounter);
				$DirCounter++;
				aggregateFile($file, $NewDir) if ($AggrDumb == 0);
				procmsg ("Aggregate: $filePrev -> $NewDir\n");
			} else {
				# Check for new direcroty creation
				if (($filenameshash{$filetmp} - $timestampPrev) > $aggrDelta) {
					$NewDir = $aggrDir . sprintf($counterprefixsize,$DirCounter);
					$DirCounter++;
				}
				aggregateFile($file, $NewDir) if ($AggrDumb == 0);
				procmsg ("Aggregate: $file -> $NewDir\n");
				$timestampPrev = $filenameshash{$filetmp};
			}
		}
		else {
			$NewDir = template2name($AggrTemplate);
			aggregateFile($file, $NewDir) if ($AggrDumb == 0);
			procmsg ("Aggregate: $file -> $NewDir\n");
		}
		procmsg ("\n");
		$filecounter++;
	}
}

########################################################################################
#
# aggregateFile() moves file to new directory
#
sub aggregateFile {
	my $file = shift;
	my $NewDir = shift;

	if (not -d $NewDir) {
		unless (mkdir $NewDir) { errmsg ("$NewDir wasn't created!\n"); }
	}
	my $newfilename = $NewDir . "/" . $file;
	rename ($file, $newfilename) || ( fatalmsg ("$file -> $newfilename\n"), die );
}

########################################################################################
#
# timeNow() returns timestamp in form YYYYmmddHHMMSS
#
sub timeNow {
	my $date = localtime();
	my $timeNow = sprintf("%04d%02d%02d%02d%02d%02d",
		$$date[5] + 1900, $$date[4] + 1, $$date[3],
		$$date[2], $$date[1], $$date[0]);
	return $timeNow;
}

########################################################################################
#
# timeValidator() returns correctness of timestamp in form YYYYmmddHHMMSS
#
sub timeValidator {
	my $timestamp = shift;

	# check length (14)
	return 1 if (length($timestamp) != 14);

	my @tm = ($timestamp =~ m/(\d{4})(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)/);
	return 1 unless @tm == 6;
	dbgmsg (4, "timeValidator(): @tm\n");

	if (
		# check year
		($tm[0] < 1900) or
		# check month
		(($tm[1] > 12) or ($tm[1] < 1)) or
		# check day
		(($tm[2] > 31) or ($tm[2] < 1)) or
		# check hour, minute, second
		($tm[3] > 23) or ($tm[4] > 59) or ($tm[5] > 59)
	   ) {
		return 1;
	}

	return 0;
}

########################################################################################
#
# getTimestamp() returns EXIF timestamp in form YYYYmmddHHMMSS if exists, otherwise
# it returns timeNow()
#
sub getTimestamp {
	my $timestamp;

	if ( defined $info->{"DateTimeOriginal"} and not timeValidator($info->{"DateTimeOriginal"}) ) {
		$timestamp = $info->{"DateTimeOriginal"};
	}
	elsif ( defined $info->{"FileModifyDate"} and not timeValidator($info->{"FileModifyDate"}) ) {
		$timestamp = $info->{"FileModifyDate"};
	}
	else {
		$timestamp = timeNow();
		$exifTool->SetNewValue('FileModifyDate', $timestamp, Group=>'File');
		warnmsg ("EXIF timestamp isn't correct, using timeNow()!\n");
	}

	return $timestamp;
}

########################################################################################
#
# getUnixTime() converts timestamp to unix time form
#
sub getUnixTime {
	my $timestamp = shift;
	my @tm = ($timestamp =~ /(\d{4})(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)/);
	$tm[0] -= 1900;     # convert year
	$tm[1] -= 1;        # convert month
	@tm = reverse @tm;  # change to order required by timelocal()
	return Time::Local::timelocal(@tm);
}

########################################################################################
#
# rotateOrient() rotates image by changing Orientation tag. No real rotation will be.
#
sub rotateOrient {
	my $fileOrient = shift;
	my $orientation = shift;

	# FIXME: we need to consider previos Orientation tag value
	if ($rotateAngle == 90) {
		$orientation = 6;
	} elsif ($rotateAngle == 270) {
		$orientation = 8;
	}

	$exifTool->SetNewValue("Orientation", $orientation, Type => 'ValueConv');
	exifWritting($exifTool, $fileOrient, $fileOrient . "_orient");
}

########################################################################################
#
# rotating the image and it's thumbnail, rewriting Orientation tag and the commentary
# to the result file
#
sub rotateFile {
	# $_[0] - file name to transform with jpegtran
	# $_[1] - the switches for jpegtran to transform the image

	my $oldfile =  $_[0];			# original name
	my $origfile = $_[0] . "_orig";	# backup original name
	my $newfile =  $_[0] . "_rotated";	# temporay name to store rotated file

	# jpegtran the image
	my $cmd = "jpegtran -copy all " . $_[1] . " -outfile " . $newfile . " " . $oldfile;
	dbgmsg (3, "rotateFile(): $cmd\n");
	system $cmd || ( fatalmsg ("System $cmd failed: $?\n"), die );

	rename ( $oldfile, $origfile ) || ( fatalmsg ("$oldfile -> $origfile\n"), die );
	rename ( $newfile, $oldfile )  || ( fatalmsg ("$newfile -> $oldfile\n"), die );

	# preparing to write Orientation tag to the just rotated file
	my $exifAfterRot = new Image::ExifTool;
	$exifAfterRot->Options(Binary => 1);

	$exifAfterRot->SetNewValue("Orientation", 1, Type => 'ValueConv');

	# writing the changes to the EXIFs
	exifWritting($exifAfterRot, $oldfile, $oldfile . "_exifed");
}

########################################################################################
#
# rotate thubnail only, where the file was rotated but thumbnail was left untouched
#
sub rotateThumbnail {
	# $_[0] - file, which thumbnale to transform with jpegtran
	# $_[1] - the switch for jpegtran to rotate the thumbnail

	if ( defined ${$$info{ThumbnailImage}} ) {
		my $fileToThumbnail =  $_[0];			# original name

		# extracting the thumbnail image
		my $ThumbnailOriginal = $fileToThumbnail . "_thumborig";
		unless ( open ( OLDTHUMBNAIL, ">$ThumbnailOriginal" ) ) {
			errmsg ("$ThumbnailOriginal wasn't opened!\n");
		}
		binmode OLDTHUMBNAIL;
		print OLDTHUMBNAIL ${$$info{ThumbnailImage}};
		unless ( close ( OLDTHUMBNAIL ) ) { warnmsg ("$ThumbnailOriginal wasn't closed!\n"); }

		# rotating the thumbnail
		my $ThumbnailOriginalRotated = $ThumbnailOriginal . "_rotated";
		my $cmd = "jpegtran -copy all " . $_[1] . " -outfile " . $ThumbnailOriginalRotated . " " . $ThumbnailOriginal;
		dbgmsg (3, "rotateThumbnail(): $cmd\n");
		system $cmd || ( fatalmsg ("System $cmd failed: $?\n"), die );

		# preparing to write the just rotated thumbnail, back to the file
		unless ( open ( THUMBNAILROTATED, "<$ThumbnailOriginalRotated" ) ) {
			errmsg ("$ThumbnailOriginalRotated wasn't opened!\n");
		}
		binmode THUMBNAILROTATED;
		my ( @rthumb ) = <THUMBNAILROTATED>;
		my $thethumb = join ('',@rthumb);
		unless ( close ( THUMBNAILROTATED ) ) { errmsg ("$ThumbnailOriginalRotated wasn't closed!\n"); }

 	 	# preparing to write thumbnale to the just rotated file
		my $exifThumbnailed = new Image::ExifTool;
		$exifThumbnailed->Options(Binary => 1);

		$exifThumbnailed->SetNewValue("ThumbnailImage", $thethumb, Type => 'ValueConv');

		# writing the changes to the EXIFs
		exifWritting($exifThumbnailed, $fileToThumbnail, $fileToThumbnail . "_thumb");

		unlink ($ThumbnailOriginalRotated) || ( fatalmsg ("While killing $ThumbnailOriginalRotated.\n"), die );
		unlink ($ThumbnailOriginal) || ( fatalmsg ("While killing $ThumbnailOriginal.\n"), die );
	}
	else {
		warnmsg ("No thumbnail found.\n");
	}
}

########################################################################################
#
# usage() - the instruction how to use the script
#
sub usage {
infomsg (
"Usage:	renrot 	<--extension EXTENSION> [--help] [--version] [--quiet] [--no-rotate] [--no-rename] [--no-mtime] [--name-template TPL] [--comment-file FILE] [--work-directory DIR] [[--] FILE1 FILE2 ...]

Options:
  -c, --config-file <FILE>	use this configuration file
  --comment-file <FILE>		file with commentary
  -d, --work-directory <DIR>	specify working directory
  --exclude <FILE> ...		define excluding files from process. No wildcards.
  -e, --extension <EXTENSION>	extension of files to be processed: JPG, jpg, JPEG e.t.c.
  --name-template <TPL>		filename template (see manual for details)
  --no-rename			no rename needed, default is to rename to the YYYYmmddHHMMSS.ext
  -r, --rotate-angle <90|270>	define the angle, to rotate file and the thumbnail on, 90 or 270 (it's for the files where no Orientation tag is present and set right way)
  --rotate-thumb <90|270>	rotate only thumbnail by 90 or 270 degree (it's for the files which were rotated, but thumbnail wasn't)
  --only-orientation		rotate by changing Orientation tag (no real rotation)
  --no-rotate			no rotation needed, default is to rotate
  --mtime (*)			to set file mtime according DateTimeOriginal tag value
  --aggr (*)			aggregation switcher, set it if you want to aggregate files
  --aggr-delta <INTERVAL>	aggregation time delta (file with delta great than INTERVAL is placed to the --aggr-directory followed by directory name counter starting from 1)
  --aggr-directory <DIR>	counterless aggregation directory name
  --aggr-dumb (*)		dumb aggregation mode: no file will be moved or directory will be created
  --aggr-template <TPL>		aggregation template (see manual for details)
  -v [-v -v ...]		amount of these options defines debug level
  -?, --help			display this help and exit
  --version			output version information and exit

(*) The option does not take an argument and may be negated, i.e. prefixed by 'no'. E.g. 'mtime' will allow '--mtime' (positive value will be assigned) and '--nomtime' and '--no-mtime' (negative value will be assigned).
");
}

########################################################################################
#
# template2name() - file name builder, according the template
#
sub template2name {
	if ( not defined $_[0] ) {
		fatalmsg ("Template isn't given!\n"), die;
	}

	my $template = $_[0];	# $_[0] the template to be used

	my $timestamp = getTimestamp();
	my @tm = ($timestamp =~ m/(\d\d(\d\d))(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)/);
	dbgmsg (4, "template2name(): tm: @tm\n");

	my $ExposureTime = "";
	my $FileNumber = 'NA';
	my $FNumber = "";
	my $ISO = "";
	my $WhiteBalance = "";

	if ( defined $info->{"ExposureTime"} ) {
		$ExposureTime = "E" . $info->{"ExposureTime"};
		$ExposureTime =~ s/\//by/g;
	}

	if ( defined $info->{"FileNumber"} ) {
		$FileNumber = "F" . $info->{"FileNumber"};
	}

	if ( defined $info->{"FNumber"} ) {
		$FNumber = $info->{"FNumber"};
	}

	if ( defined $info->{"ISO"} ) {
		$ISO = "I" . $info->{"ISO"};
	}

	if ( defined $info->{"WhiteBalance"} ) {
		$WhiteBalance = "W" . $info->{"WhiteBalance"};
		$WhiteBalance =~ s/[\s()]//g;
	}

	my @templatearea = split (//, $template);
	my %templatehash = (
				'%' => "%",
				'a' => $anglesuffix,
				'c' => sprintf($counterprefixsize, $filecounter),
				'd' => $tm[3],
				'E' => $ExposureTime,
				'F' => $FNumber,
				'H' => $tm[4],
				'I' => $ISO,
				'i' => $FileNumber,
				'M' => $tm[5],
				'm' => $tm[2],
				'S' => $tm[6],
				'W' => $WhiteBalance,
				'Y' => $tm[0],
				'y' => $tm[1],
			   );
	my $thename = "";

	my $substroffset = 0;
	my $substrchar;

	dbgmsg (4, "template2name(): '$template' (length: " . ($#templatearea + 1) .")\n");
	while ( $substroffset <= $#templatearea ) {
		$substrchar = $templatearea[$substroffset++];
		if ( $substrchar eq "%" and $substroffset <= $#templatearea ) {
			$substrchar = $templatearea[$substroffset++];
			if ( defined $templatehash{$substrchar} ) {
				$thename .= $templatehash{$substrchar};
			}
		}
		else { $thename .= $substrchar; }
	}

	return $thename;
}

__END__

=head1 NAME

renrot - rename and rotate images according EXIF data

=head1 SYNOPSIS

renrot [OPTIONS] [[B<-->] FILE1 FILE2 ...]

=head1 DESCRIPTION

B<RenRot> is intended to work with files of B<--extension> extension, containing
EXIF date and can do two things with them - rename and rotate. It runs in batch
mode in current or set with B<--work-directory> directory, as well as selective
mode for separate files given as arguments in command line.

RenRot renames files according the DateTimeOriginal and FileModifyDate EXIF
tags, if they exist. Otherwise, the name will be set according to the current
time stamp and will look as YYYYmmddHHMMSS.XXXX.ext, where XXXX is whether file
ID, if exists in EXIF (as for Canon) or incremental suffix to the name
YYYYmmddHHMMSS.

Additionally, it rotates files and their thumbnails, accordingly Orientation
EXIF tag. When the tag is absent or miss set, the program allows to rotate the
file as well as it's thumbnail via B<--rotate-angle> and B<--rotate-thumb>
options.

The script, also, is placing commentary into:

=over

- Commentary tag, if commentary file provided with B<--comment-file> option

- UserComment tag, if COMMENTARY variable set in configuration file

=back

Personal details can be specified via XMP tags defined in a configuration
file, look L<CONFIG> section.

In addition, RenRot can aggregate all files in directories according the given
date/time pattern template, set with B<--aggr-template>.

=head1 OPTIONS

=over

=item B<-c> or B<--config-file> I<Configuration FILE>

location of the configuration file

=item B<--comment-file> I<Comment FILE>

file with commentary

=item B<-d> or B<--work-directory> I<DIR>

define the working directory

=item B<--exclude> I<FILE>

specify files to exclude. No wildcards are available. For set of files
option must be occured as same time as files given.

=item B<-e> or B<--extension> I<EXTENSION>

extension of files to be processed, JPG, jpg, JPEG, CRW, crw e.t.c.

=item B<--name-template> I<Name TEMPLATE>

template, which is used for file name building while renaming. It could be
defined in configuration file (the variable NameTemplate). The default is
I<%Y%m%d%H%M%S>. For practical results look L<EXAMPLES> section.

Interpreted sequences are:

=over

B<%%>	a literal %

B<%c>	file order number in the processed file set

B<%d>	day of the month (01-31)

B<%E>	ExposureTime tag value if defined

B<%F>	FNumber tag value if defined

B<%H>	hour (00-23)

B<%I>	ISO tag value if defined

B<%i>	FileNumber tag if exists (otherwise, it'll be replaced by string
C<NA>)

B<%M>	minute (00-59)

B<%m>	month (01-12)

B<%S>	second (00-59)

B<%W>	WhiteBalance tag value if defined

B<%Y>	year (1900, 1901, and so on)

B<%y>	last two digits of year (00..99)

=back

=item B<--no-rename>

no rename needed, default is to rename to the YYYYmmddHHMMSS.ext

=item B<--rotate-angle> I<90> or I<270>

define the angle, to rotate file and the thumbnail on, 90 or 270. It's for the
files where no Orientation tag is set right way.

=item B<--rotate-thumb> I<90> or I<270>

rotate only thumbnail by 90 or 270 degree. It's for the files which were
rotated, but thumbnail wasn't.

=item B<--only-orientation>

rotate by changing Orientation tag, no real rotation

=item B<--no-rotate>

no rotation needed, default is to rotate according EXIF data

=item B<--mtime>

defines, whether to set mtime of the file, using DateTimeOriginal tag value

=item B<--no-mtime>

opposite to B<--mtime>. mtime of the file will be the one after processing

=item B<--aggr-delta> I<Time INTERVAL>

the type of aggregation "delta". Really it is aggregation time delta in seconds
(file with DateTimeOriginal and the one of the previous file delta, greater
than B<--aggr-delta> is placed to the B<--aggr-directory> followed by directory name
counter).

=item B<--aggr-directory> I<DIR>

counterless aggregation directory name

=item B<--aggr-dumb>

dumb aggregation mode. No file moved or directory created. Useful to look
whether result fits expectations (default is on).

=item B<--no-aggr-dumb>

aggregation mode when files are moved to directories created

=item B<--aggr-template> I<Aggregation TEMPLATE> or I<delta>

template, which is used for file aggregation. Aggregation fulfils according
date/time patterns. You may use combination of B<%d>, B<%H>, B<%M>, B<%m>,
B<%S>, B<%Y>, and/or B<%y> keys. It could be defined in configuration file
(the variable AggrTemplate). The default is I<%Y%m%d>. For detailed
description, please, turn to B<--name-template> option. For practical results
look L<EXAMPLES> section.

=item B<-v>

one or more I<-v> sets debug level. From 1 to 4 - internal levels,
5 till 9 - equal to 1-5 levels for ExifTool plus maximum verbosity for renrot.

=item B<-?> or B<--help>

display quick help and exit

=item B<--version>

output version information and exit

=head1 B<EXAMPLES>

The name template C<01.%c.%Y%m%d%H%M%S.%i.%E%F%W%I> may produces following names:

=over

01.0021.20030414103656.NA.E1by40F2.8WAutoI160.jpg

01.0024.20040131230857.100-0078.E1by320F2.8WAutoI50.jpg

01.0022.20000820222108.NA.jpg

=back

where I<F> stays for FNumber, I<E> for ExposureTime, I<I> for ISO and
I<W> for WhiteBalance.

The aggregation template C<%Y%m%d> produces following aggregation:

=over

this couple of files

=over

01.11.20030414103656.NA.jpg

01.12.20030414103813.NA.jpg

01.13.20030414103959.NA.jpg

=back

will be put to the directory I<20030414> and

=over

01.14.20040131130857.100-0078.jpg

01.15.20040131131857.100-0079.jpg

01.16.20040131133019.100-0080.jpg

01.17.20040131135857.100-0083.jpg

=back

will be put to the directory I<20040131>.

=back

=head1 CONFIG

Config file could be used to set some variables. Config file is just perl
code. B<RenRot> looks for B<--config-file> option firstly, than it looks for
file named renrot.rc in system directories such as /etc and /usr/local/etc.
And finally it looks for file named .renrotrc in home directory of the user.
User defined configuration file can be given via B<--config-file> option.

These tags could be set via configuration file:

=over

=item B<Mtime>

set to 1 for synchronize mtime with tags, otherwise set it to 0

=item B<NameTemplate>

name template, which defines the file name look (see B<--name-template>)

=item B<AggrTemplate>

aggregation template, which defines the file aggregation (see B<--aggr-template>)

=item B<UserComment>

anything you'd wanna put as commentary

=item B<CiAdrCity>

city tag

=item B<CiAdrCtry>

country tag

=item B<CiAdrExtadr>

extended address (usually street and apartments)

=item B<CiAdrPcode>

zip code

=item B<CiAdrRegion>

region

=item B<CiEmailWork>

email

=item B<CiTelWork>

phone

=item B<CiUrlWork>

URL

=back

=head1 FILES

configuration file placement (with high priority first)

=over

=item B<~/.renrotrc>

=item B</usr/local/etc/renrot.rc>

=item B</etc/renrot.rc>

=back

=head1 AUTHOR

Copyright 2005-2006, Zeus Panchenko

This library is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

=head1 SEE ALSO

L<Image::ExifTool(3pm)|Image::ExifTool>,L<jpegtran(1)>

=cut
