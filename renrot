#!/usr/bin/perl -w

#
# $Id$
#

use strict;
require 5.004;
use Time::localtime;
use Image::ExifTool;
use Getopt::Long;

my $VERSION;
$VERSION = "0.13";	# the version of this script

my $noRotation;	# no rotation needed, default is to rotate
my $rotate;	# define the angle, to rotate on, 90 or 270
my $rotateThumbnail; # define the angle, to rotate on, 90 or 270
my $noRename;	# no rename needed, default is to rename to the YYYYmmddHHMMS.jpeg
my $noComment;	# no comment needed
my $namePrefix;	# prefix to the filename
my $namePrefixOnly; # prefix to the filename (for case when no date in name needed)
my $nameSuffix;	# suffix to the filename
my $extentionToProcess;	# the extention of files to work with
my $extentionToProcessLowCase; # lowercased extention of files to work with
my $usageOutput = 0;	# flag to show the usage
my $configFile;	# config file
my $comfile;	# file with commentary
my $verbose = 0;	# verbosity of output

sub debug {
    my $level = shift;
    print STDERR @_ if ($verbose >= $level);
}

sub getopt {
	my $ver;	# need version
	my $help;	# need help
	my $getopt = GetOptions (
		"ext|e=s" => \$extentionToProcess,
		"rotate|r=i" => \$rotate,
		"rotate-thumb=i" => \$rotateThumbnail,
		"no-rotate" => \$noRotation,
		"no-rename" => \$noRename,
		"comment-file=s" => \$comfile,
		"name-prefix=s" => \$namePrefix,
		"name-prefix-only=s" => \$namePrefixOnly,
		"name-suffix" => \$nameSuffix,
		"c=s" => \$configFile,
		"v+" => \$verbose,
		"version" => \$ver,
		"help|?"   => \$help);

	if (defined $help && $help != 0) {
		usage();
		exit 0;
	}
	
	if (defined $ver && $ver != 0) {
		print STDERR "renrot version $VERSION\n";
		exit 0;
	}

	if (not defined $extentionToProcess) {
	    print STDERR "Extention of files is required!\n";
	    exit 1;
	}

	if ($getopt == 0) {
		usage();
		exit 1;
	}

	# change user's parameter '*.ext' to 'ext'
	$extentionToProcess =~ s/^\*\.//;
	debug (2, "Process with '$extentionToProcess' extention\n");
}

# parse command-line options
getopt();

# the default commentary to add to UserComment
our $COMMENTARY;
our $CiAdrCity;
our $CiAdrCtry;
our $CiAdrExtadr;
our $CiAdrPcode;
our $CiAdrRegion;
our $CiEmailWork;
our $CiTelWork;
our $CiUrlWork;
our $City;

my $etc_rc = "/etc/.renrotrc";
my $usrlocaletc_rc = "/usr/local/etc/.renrotrc";
my $homedir_rc = $ENV{"HOME"} . "/.renrotrc";;
my $justhere_rc = "./.renrotrc";

if ( defined ( $configFile ) and -f $configFile ) { do $configFile; }
elsif ( -f $justhere_rc ) { do $justhere_rc; }	
elsif ( -f $homedir_rc ) { do $homedir_rc; }
elsif ( -f $usrlocaletc_rc ) { do $usrlocaletc_rc; }
elsif ( -f $etc_rc ) { do $etc_rc; }


my $exifTool = new Image::ExifTool;
$exifTool->Options(Binary => 1, Unknown => 1, DateFormat => '%Y%m%d%H%M%S');

my $file;		# file in the directory
my $info;		# ImageInfo object
my $newfilename;	# the name file to be renamed to
my $orientation = '';	# Orientation tag value
my @filenameSplited;	# array to hold filename splitted to the parts
my $comment;		# where to put the commentary to write
my @commentar;		# array to put the content of the file with commentary
my $dir = ".";		# now we'll work ONLY in current directory
my $filecounter = 1;	# counter to cat and increment when DateTimeOriginal is absent
my $countersuffix;	# the suffix to add after timestamp to name the files without DateTimeOriginal tag
my $now;		# now timestamp to use to name the files without DateTimeOriginal tag
my $rotas;		# how to rotate
my @rotparms = (''
	, '-flip horizontal'
        , '-rotate 180'
        , '-flip vertical'
        , '-transpose'
        , '-rotate 90'
        , '-transverse'
        , '-rotate 270');
my %rotangles = ( '90' => '-rotate 90', 
		 '270' => '-rotate 270');

my $errorMessage;
my $warningMessage;
my $suffix = "";
my $prefix = "";
my $ExposureTime = "";
my $WhiteBalance = "";

opendir (DIR, $dir) || die "ERROR: " . $dir . " was not opened!";

while ( defined ( $file = readdir DIR )) {
	next if $file =~ /^\.\.?$/;	# skip the current directory entry
	next if ( -d $file );		# is this a directory?
	
	$extentionToProcessLowCase = $extentionToProcess;
	$extentionToProcessLowCase =~ tr/A-Z/a-z/;

	@filenameSplited = split (/\./,$file);
	# if we have defined extention files here
	if ( $filenameSplited[$#filenameSplited] && ( $filenameSplited[$#filenameSplited] eq $extentionToProcess ) ) {
		$info = $exifTool->ImageInfo($file);
		$newfilename = "";
		#################################################################################
		#
		## analyzing whether and how to rename file 
		#
		if ( defined $noRename ) { 
			print "No renaming asked, filename is left untouched\n\n"; 
			$newfilename = $file;
		}
		else {
			if ( defined $namePrefix ) { 
				$newfilename = $namePrefix . "."; 
			}
			if ( defined $nameSuffix ) {
				if ( defined $info->{"ExposureTime"} ) {
					$ExposureTime = $info->{"ExposureTime"};
					$ExposureTime =~ s/\//by/g;
				}
				else { $ExposureTime = 0; }
				if ( defined $info->{"WhiteBalance"} ) {
					$WhiteBalance = $info->{"WhiteBalance"};
					$WhiteBalance =~ s/[\s()]//g;
				}
				else { $WhiteBalance = 0; }

				$suffix = ".W" . $WhiteBalance
					. "I" . $info->{"CameraISO"}
					. "A" . $info->{"FNumber"}
					. "E" . $ExposureTime;
			}
			if ( defined ( $info->{"DateTimeOriginal"} ) 
				&& defined ( $info->{"FileNumber"} ) 
				&& !(defined $namePrefixOnly) ) {
	
				$newfilename = $newfilename . $info->{"DateTimeOriginal"} 
							. "." . $info->{"FileNumber"} . $suffix 
							. "." . $extentionToProcessLowCase;
			}
			elsif ( defined ( $info->{"DateTimeOriginal"} )
				&& !( defined ( $info->{"FileNumber"} ) )
				&& !( defined $namePrefixOnly ) ) {
				
				$countersuffix = sprintf('%.4d', $filecounter);
				$newfilename = $newfilename . $info->{"DateTimeOriginal"} . "." . $countersuffix
							. $suffix . "." . $extentionToProcessLowCase;
				$filecounter++;
				
			}
			else { # if not exists, than adding XXXX index to the end of timestamp
				$countersuffix = sprintf('%.4d', $filecounter);
				if ( defined $namePrefixOnly ) {
					$prefix = $namePrefixOnly;
				}
				else {
					$prefix = now();
				}
				$newfilename = $newfilename . $prefix . "." . $countersuffix 
							. "." . $suffix . "." . $extentionToProcessLowCase;
				$filecounter++;
			}
			
			if ( $file ne $newfilename ) { 
				rename ( $file, $newfilename ) 
					|| die "Unable to rename " . $file ." -> " . $newfilename . "\n"; 
				print $file . " -> " . $newfilename . "\n";
			}
			else { print "No renaming needed for " . $newfilename . ", it looks as needed!\n"; }
		}
		################################################################################################
		#
		## analyzing whether to rotate
		#		
		if ( defined $noRotation ) { print "No rotation asked, file orientation is left untouched\n\n"; }
		elsif ( defined $rotate ) {
			print "we'll deal with: " . $newfilename . " and " . $rotangles{$rotate} . "\n";
			rotateFile($newfilename, $rotangles{$rotate});
			rotateThumbnail($newfilename, $rotangles{$rotate});
		}
		elsif ( defined $rotateThumbnail ) {
			rotateThumbnail($newfilename, $rotangles{$rotateThumbnail});
		}
		else {
			if ( defined( $orientation = $exifTool->GetValue("Orientation", 'ValueConv') ) ) {
				if ( $orientation > 1 ) {
					$rotas = $rotparms[$orientation - 1];
					rotateFile($newfilename, $rotas); 
					rotateThumbnail($newfilename, $rotas);
				}
				elsif ( $orientation == 1 ) { 
					print "No need to rotate, orientation is: Horisontal (normal)\n"; 
				}
				else {
					print "Something wrong, orientation is < 1: $orientation\n";
				}
			}
			else { 
				print "Orientation tag is absent!\n"; 
			}
		}

		
		###############################		
		#
		## analyzing whether to comment
		#
		my $comentedfilename = $newfilename . "_comment";
		if ( $comfile ) {
			if ( open ( COMMENT, "<$comfile" ) ) {
				@commentar = <COMMENT>;
				unless ( close ( COMMENT ) ) { print "ERROR: " . $comfile . " wasn't closed!\n"; }
				$comment = join ( '', @commentar );
				# preparing to write the commentary
				$exifTool->SetNewValue(Comment => $comment);
  			}
		}
		else { print "No commenting, file commentary is left untouched\n"; }
		
		######################################
		#
		## preparing to write the UserComment and some additional tags
		#
		if ( defined ( $COMMENTARY ) ) { $exifTool->SetNewValue(UserComment => $COMMENTARY); }

		if ( defined ( $CiAdrCity ) ) {
			$exifTool->SetNewValue('CreatorContactInfoCiAdrCity', $CiAdrCity, Group=>'XMP');
		}
		if ( defined ( $CiAdrCtry ) ) {
			$exifTool->SetNewValue('CreatorContactInfoCiAdrCtry', $CiAdrCtry, Group=>'XMP');
		}
		if ( defined ( $CiAdrExtadr ) ) {
			$exifTool->SetNewValue('CreatorContactInfoCiAdrExtadr', $CiAdrExtadr, Group=>'XMP');
		}
		if ( defined ( $CiAdrPcode ) ) {
			$exifTool->SetNewValue('CreatorContactInfoCiAdrPcode', $CiAdrPcode, Group=>'XMP');
		}
		if ( defined ( $CiAdrRegion ) ) {
			$exifTool->SetNewValue('CreatorContactInfoCiAdrRegion', $CiAdrRegion, Group=>'XMP');
		}
		if ( defined ( $CiEmailWork ) ) {
			$exifTool->SetNewValue('CreatorContactInfoCiEmailWork', $CiEmailWork, Group=>'XMP');
		}
		if ( defined ( $CiTelWork ) ) {
			$exifTool->SetNewValue('CreatorContactInfoCiTelWork', $CiTelWork, Group=>'XMP');
		}
		if ( defined ( $CiUrlWork ) ) {
			$exifTool->SetNewValue('CreatorContactInfoCiUrlWork', $CiUrlWork, Group=>'XMP');
		}
		if ( defined ( $City ) ) {
			$exifTool->SetNewValue('City', $City, Group=>'XMP');
		}

		# writing the changes to the EXIFs
		my $res = $exifTool->WriteInfo( $newfilename, $comentedfilename);
		if ( $res == 1 ) { 
			# print "writing to " . $comentedfilename . " ok\n"; 
			rename ( $comentedfilename, $newfilename  )  
				|| die "ERROR: " . $comentedfilename . " -> " . $newfilename . "\n"; 
		}
		elsif ( $res == 2 ) { 
			print "No changes between " . $newfilename . "\n and " . $comentedfilename . " no EXIF written\n";
			unlink $comentedfilename;
		}
		else {
			my $errorMessage   = $exifTool->GetValue('Error');
			my $warningMessage = $exifTool->GetValue('Warning');
			if ( defined $errorMessage ) { print "EXIF ERROR: " . $errorMessage . "\n"; }
			if ( defined $warningMessage ) { print "EXIF WARNING: " . $warningMessage . "\n"; }
		}
		print "\n\n\n";
	}
}

closedir(DIR);

exit 0;

########################################################################################
#
# now() returns timestamp in form YYYYmmddHHMMS
# 
sub now {
	my $date = (localtime);
	$$date[5] = $$date[5] + 1900;
	for (my $i = 0 ; $i < 5 ; $i++ ) {
		if ( $$date[$i] < 10 ) { $$date[$i] = "0" . $$date[$i]; }
	}
	return $$date[5] . $$date[4] . $$date[3] . $$date[2] . $$date[1] . $$date[0];
}


########################################################################################
#
# rotating the image and it's thumbnail, rewriting Orientation tag and the commentary
# to the result file
#
sub rotateFile {
	# $_[0] - file name to transform with jpegtran
	# $_[1] - the switche for jpegtran to transform the image
	
	my $oldfile =  $_[0];			# original name
	my $origfile = $_[0] . "_orig";	# backup original name
	my $newfile =  $_[0] . "_rotated";	# temporay name to store rotated file
	
	# jpegtran the image
	my $cmd = "jpegtran -copy all " . $_[1] . " -outfile " . $newfile . " " . $oldfile;
	print "rotate file: " . $cmd . "\n";
	system $cmd || die "system $cmd failed: $?";
	
	rename ( $oldfile, $origfile ) || die "ERROR: " . $oldfile . " -> " . $origfile . "\n";
	rename ( $newfile, $oldfile )  || die "ERROR: " . $newfile . " -> " . $oldfile . "\n";
	
	# preparing to write Orientation tag to the just rotated file
	my $exifAfterRot = new Image::ExifTool;
	$exifAfterRot->Options(Binary => 1);
	my $exifedfile = $oldfile . "_exifed";	# the file name, exifed file to be put to
	
	$exifAfterRot->SetNewValue("Orientation", 1, Type => 'ValueConv');
	
	# writing the changes to the EXIFs
	my $res = $exifAfterRot->WriteInfo($oldfile, $exifedfile);
	if ( $res == 1 ) { 
		print "writing to " . $exifedfile . " ok\n"; 
		rename ( $exifedfile, $oldfile )  
			|| die "ERROR: " . $exifedfile . " -> " . $oldfile . "\n";
	}
	elsif ( $res == 2 ) { print "No changes for " . $exifedfile . "\n"; }
	else {
		my $errorMessage   = $exifAfterRot->GetValue('Error');
		my $warningMessage = $exifAfterRot->GetValue('Warning');
		if ( defined $errorMessage ) { print "EXIF ERROR: " . $errorMessage . "\n"; }
		if ( defined $warningMessage ) { print "EXIF WARNING: " . $warningMessage . "\n"; }
	}
	$oldfile = $origfile = $newfile = "";
 }

 ########################################################################################
 #
 # rotate thubnail only, where the file was rotated but thumbnail was left untouched
 #
 sub rotateThumbnail {
	# $_[0] - file, which thumbnale to transform with jpegtran
	# $_[1] - the switch for jpegtran to rotate the thumbnale

	if ( defined ${$$info{ThumbnailImage}} ) { 	
		my $fileToThumbnail =  $_[0];			# original name
		
		# extracting the thumbnail image
		my $ThumbnailOriginal = $fileToThumbnail . "_thumborig";
		unless ( open ( OLDTHUMBNAIL, ">$ThumbnailOriginal" ) ) { 
			print "ERROR: " . $ThumbnailOriginal . " wasn't opened!\n"; 
		}
		print OLDTHUMBNAIL ${$$info{ThumbnailImage}};
		unless ( close ( OLDTHUMBNAIL ) ) { print "WARNING: " . $ThumbnailOriginal . " wasn't closed!\n"; }
		
		# rotating the thumbnail
		my $ThumbnailOriginalRotated = $ThumbnailOriginal . "_rotated";
		my $cmd = "jpegtran -copy all " . $_[1] . " -outfile " . $ThumbnailOriginalRotated . " " . $ThumbnailOriginal;
		print "rotate thmb: " . $cmd . "\n";
		system $cmd || die "system $cmd failed: $?";
		
		# preparing to write the just rotated thumbnail, back to the file
		unless ( open ( THUMBNAILROTATED, "<$ThumbnailOriginalRotated" ) ) { 
			print "ERROR: " . $ThumbnailOriginalRotated . " wasn't opened!\n"; 
		}
		binmode THUMBNAILROTATED;
		my ( @rthumb ) = <THUMBNAILROTATED>;
		my $thethumb = join ('',@rthumb);
		unless ( close ( THUMBNAILROTATED ) ) { print "ERROR: " . $ThumbnailOriginalRotated . " wasn't closed!\n"; }
		
 	 	# preparing to write thumbnale to the just rotated file
		my $exifThumbnailed = new Image::ExifTool;
		$exifThumbnailed->Options(Binary => 1);
		
		my $fileThumbnailed = $fileToThumbnail . "_thumb";  # the file name, thumbnailed file to be put to
		
		$exifThumbnailed->SetNewValue("ThumbnailImage", $thethumb, Type => 'ValueConv');
		
		# writing the changes to the EXIFs
		my $res = $exifThumbnailed->WriteInfo($fileToThumbnail, $fileThumbnailed);
		if ( $res == 1 ) { 
			print "writing to " . $fileThumbnailed . " ok\n"; 
			rename ( $fileThumbnailed, $fileToThumbnail )  
				|| die "ERROR: " . $fileThumbnailed . " -> " . $fileToThumbnail . "\n";
		}
		elsif ( $res == 2 ) { print "No changes for " . $fileThumbnailed . "\n"; }
		else {
			my $errorMessage   = $exifThumbnailed->GetValue('Error');
			my $warningMessage = $exifThumbnailed->GetValue('Warning');
			if ( defined $errorMessage ) { print "EXIF ERROR: " . $errorMessage . "\n"; }
			if ( defined $warningMessage ) { print "EXIF WARNING: " . $warningMessage . "\n"; }
		}
	
		unlink ($ThumbnailOriginalRotated) || die "ERROR: while killing " . $ThumbnailOriginalRotated;
		unlink ($ThumbnailOriginal) || die "ERROR: while killing " . $ThumbnailOriginal;
	}
	else {
		print "No thumbnail found.\n";
	}
 }

########################################################################################
#
# usage() - the instruction how to use the script
# 
sub usage {
print STDERR <<_USAGE_;
Usage:	renrot 	[-h|--help] [--no-rotate] [--no-rename] [--comment-file FILE] 
		[--version] [--name-prefix NAMEPREFIX] <--ext EXTENTION>

		-h | --help		this very page
		-c			config file (see man for details)
		--ext <EXTENTION>	extention of files to be processed, JPG, jpg, JPEG e.t.c.
		--no-rotate		no rotation needed, default is to rotate
		--rotate <90|270>	define the angle, to rotate file and the thumbnail on, 
					90 or 270. it's for the files where no Orientation tag 
					is present and set right way
		--rotate-thumb <90|270>	rotate thumbnail ONLY. 90 or 270 degree
					it's for the files which were rotated, but thumbnail wasn't
		--no-rename		no rename needed, default is to rename to the YYYYmmddHHMMS.jpeg
		--name-prefix <PREFIX>	prefix to the filename
		--name-prefix-only	prefix to the filename when no date in the name needed
		--name-suffix		suffix to the filename, the values of aperture, exsposure time, 
					iso and white balance are added to the filename as suffix, see manual
		--comment-file <FILE>	file with commentary
		--version		the version of this script
_USAGE_
}

__END__

=head1 NAME

renrot - rename and rotate images according EXIF data

=head1 SYNOPSIS

renrot [OPTIONS]

=head1 DESCRIPTION

B<Renrot> is intended to work ONLY in current directory

It renames files according the DateTimeOriginal EXIF tag if it's exists
than if it isn't, according the FileModifyDate EXIF tag if it's exists
than if it isn't, the name will be given according the current timestamp
and will look as YYYYmmddHHMMS-XXXXX.jpeg where XXXXX is incrementable 
suffix to the name YYYYmmddHHMMS.

It rotates file and it's thumbnail, accordingly Orientation EXIF tag.
If the tag is absent or miss set, than the script allows to rotate the file
as well as it's thumbnail,

After all, the script can put the commentary to:

	- Commentary tag if commentary file provided with --comment-file option

	- UserComment tag if $COMMENTARY variable set in config file

Personal data could be specified via XMP tags defined in config file, look 
CONFIG section.
	
=over 5

=head1 OPTIONS

=over 5

=item B<-h> or B<--help>

the help

=item B<-c> I<config file>

location of the config file

=item B<--ext> I<EXTENTION>

extention of files to be processed, JPG, jpg, JPEG, CRW, crw e.t.c.

=item B<--rotate> I<90> or I<270>

define the angle, to rotate file and the thumbnail on, 90 or 270 it's for the files where no Orientation tag is set right way

=item B<--rotate-thumb> I<90> or I<270>

rotate thumbnail ONLY. 90 or 270 degree. it's for the files which were rotated, but thumbnail wasn't

=item B<--no-rotate>

no rotation needed, default is to rotate

=item B<--no-rename>

no rename needed, default is to rename to the YYYYmmddHHMMS.jpeg

=item B<--comment-file> I<COMMENTFILENAME>

file with commentary

=item B<--version>

the version of this script

=item B<--name-prefix> I<PREFIX>

prefix to the filename, if defined, filenames looks like:  myprefix-YYYYmmddHHMMS-XXXXX.jpg

=item B<--name-prefix-only> I<PREFIX>

prefix to the filename when no date in the filename whished, if defined, filenames looks like:  myprefix-XXXXX.jpg

=item B<--name-suffix>

suffix to the filename, the value of tags: FNumber, CameraISO, WhiteBalance and ExposureTime, if defined, filenames looks like: 

20050813072758.a8-e1by1760-i400-wbDaylight.crw
20050813072814.a6.3-e1by1244-i200-wbClowdy.jpg

where I<a> stays for FNumber, I<e> for ExposureTime, I<i> for CameraISO and I<wb> for WhiteBalance

=head1 CONFIG

Config file could be used to set some variables. Config file is just perl code. B<Renrot> looks for B<-c> option firstly, than it looks for file named .renrotrc in: current directory, home directory of the user, /usr/local/etc and finaly in /etc. Config file can be given via B<-c> option.

These tags could be set via config file:

=item B<UserComment>

anything you'd wanna put as commentary

=item B<CiAdrCity>	

City

=item B<CiAdrCtry>	

street

=item B<CiAdrExtadr> 	

extended address

=item B<CiAdrPcode>	

zip code

=item B<CiAdrRegion>	

region

=item B<CiEmailWork>

email

=item B<CiTelWork>	

phone

=item B<CiUrlWork>

URL

=item B<City>

city

=head1 FILES

config file placement

=item B<./.renrotrc>

=item B<~/.renrotrc>

=item B</usr/local/etc/.renrotrc>

=item B</etc/.renrotrc>

=head1 AUTHOR

Copyright 2005, Zeus Panchenko

=head1 SEE ALSO

L<Image::ExifTool(3pm)|Image::ExifTool>,L<jpegtran(1)>

=cut
